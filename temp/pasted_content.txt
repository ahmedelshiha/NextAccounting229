Phase 1 — Core marketing pages (MVP)

Goal: Home, About, Services (catalog + modal), Contact, header/footer, language switcher (UI only).

Small tasks

Header & Footer component (site-wide): logo, nav links, language switcher, social icons, primary CTA “Book a Consultation”.

Home page: hero (headline/sub), service cards (4), trust badges, latest blog snippet.

About page: mission + team cards.

Services page: grid of service cards; clicking a card opens a Service Modal/Drawer with description and “Book this service” button. (Modal connects to booking link.)

Contact page: contact form (name, email, phone, message, service interest) + office map embed.

What I’ll produce for you:

Builder.io prompt to generate these pages/components visually (copy/paste ready).

Manus prompt to generate the same as a static React/Next scaffold (if you want full code).

If you want hand-coded, I can generate the code for Header, Footer, and Services Card (React + Tailwind) in the next message.

Acceptance criteria: header/footer present on all pages, services modal opens & shows details, contact form validates and shows success message (no backend needed yet).

Phase 2 — Booking MVP (client can pick a service & book)

Goal: A functioning booking flow where clients can choose service → pick time slot → provide contact info → receive email confirmation.

Small tasks

Booking UI: Stepper (Select service → Pick date/time → Contact info → Confirm).

Simple availability engine (serverless): configurable availability per day; prevent double-booking. (We’ll start with staff-agnostic slots.)

Confirmation emails with ICS file (calendar invite).

Client account: optional but recommended — simple register/login (email+password). We can start without login and save the idea for Phase 4.

What I’ll produce: API spec + example serverless functions (Node/Next API or Supabase functions) to create bookings and send confirmation email. Also Builder.io/Manus prompts to add booking UI and wire it to your serverless endpoints.

Acceptance criteria: create booking in DB (or in-memory for MVP), client receives confirmation email with booking details and calendar attachment.

Phase 3 — Blog + Admin (admin can create posts)

Goal: Blog with admin page to create/edit posts (WYSIWYG). For fast setup we’ll integrate Builder.io as the headless CMS OR use a simple admin in Next.js.

Small tasks

Create a CMS model (Post) with fields: title, slug, excerpt, body (rich), coverImage, tags, author, publishedAt, locale. (Builder.io makes this model visually.) 
Builder.io

Public blog listing & single post pages with SEO meta.

Admin: protected area to create/edit posts (can use Builder.io editor or our admin UI).

Setup basic auth for admin (email/password).

What I’ll produce: step-by-step to set post model in Builder.io, or a Next.js admin page + API endpoints to manage posts. Also a “how to” prompt for Manus to create the blog + admin.

Acceptance criteria: create a post in the admin and see it published on the public blog URL (with OG image and SEO meta).

Phase 4 — Multilingual & RTL (English default → Arabic + Hindi)

Goal: site content available in EN (default), AR (RTL), HI (Hindi). Language switcher working and content falls back to English if missing.

Small tasks

Add i18n routing (e.g., /en/..., /ar/..., /hi/...) — or use Builder.io locale features. 
Builder.io

Provide translations for all static copy; include translations for services & blog posts (CMS should support locale fields).

RTL tweaks: add dir="rtl" on Arabic pages, test layout mirroring (chevrons, padding).

Locale aware dates/numbers.

What I’ll produce: a translation checklist, sample JSON i18n files, and a Builder.io prompt to generate localized pages and assets.

Acceptance criteria: switching language changes UI text and layout (Arabic uses RTL). Blog posts show chosen locale if available.

Phase 5 — Client Portal & Payments (phase 2)

Goal: Client login area with bookings list, reschedule/cancel; optional Stripe payment for deposits.

Small tasks

Client portal skeleton (bookings list → reschedule/cancel).

Integrate Stripe for optional deposits.

Add staff calendar view (admin) and reschedule flows.

What I’ll produce: Prisma/DB schema changes for invoices/payments, Stripe integration sample code, and builder prompts to add portal pages.

Acceptance criteria: logged-in client can view bookings and pay deposit (test mode) and staff can view bookings in admin.

Phase 6 — Polish, tests & launch

Goal: SEO, accessibility, backups, analytics, error monitoring, and launch checklist.

Small tasks

Lighthouse/Performance fixes, SEO tweaks, schema markup, GA/Plausible.

Accessibility checks (keyboard nav, ARIA).

Setup CI/CD, backups, and a test plan (smoke tests for booking).

Acceptance criteria: passes basic Lighthouse checks; booking & blog create flows tested.