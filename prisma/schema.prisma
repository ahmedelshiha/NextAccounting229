// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NETLIFY_DATABASE_URL")
}

// User model for authentication and role management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?   // For credential auth
  image         String?
  role          UserRole  @default(CLIENT)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts Account[]
  sessions Session[]
  posts    Post[]
  bookings Booking[]

  @@map("users")
}

// NextAuth Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// NextAuth VerificationToken model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Blog posts model
model Post {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  content     String      @db.Text
  excerpt     String?     @db.Text
  published   Boolean     @default(false)
  featured    Boolean     @default(false)
  coverImage  String?
  seoTitle    String?
  seoDescription String?
  tags        String[]
  readTime    Int?        // in minutes
  views       Int         @default(0)
  authorId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  publishedAt DateTime?

  // Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
}

// Services offered by the accounting firm
model Service {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String    @db.Text
  shortDesc   String?   // For cards/previews
  features    String[]  // Array of features/deliverables
  price       Decimal?  // Starting price
  duration    Int?      // Duration in minutes for booking
  category    String?   // e.g., "Tax", "Bookkeeping", "Advisory"
  active      Boolean   @default(true)
  featured    Boolean   @default(false)
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  bookings Booking[]

  @@map("services")
}

// Booking system for client appointments
model Booking {
  id          String        @id @default(cuid())
  clientId    String
  serviceId   String
  status      BookingStatus @default(PENDING)
  
  // Booking details
  scheduledAt DateTime
  duration    Int           // Duration in minutes
  notes       String?       @db.Text
  
  // Client information (for non-registered users)
  clientName  String
  clientEmail String
  clientPhone String?
  
  // Internal notes and management
  adminNotes  String?       @db.Text
  confirmed   Boolean       @default(false)
  reminderSent Boolean      @default(false)
  
  // Timestamps
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  client  User    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

// Contact form submissions
model ContactSubmission {
  id          String   @id @default(cuid())
  name        String
  email       String
  phone       String?
  company     String?
  subject     String?
  message     String   @db.Text
  source      String?  // Where they came from
  responded   Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@map("contact_submissions")
}

// Newsletter subscribers
model Newsletter {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  subscribed  Boolean  @default(true)
  source      String?  // Where they subscribed from
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("newsletter")
}

// Enums
enum UserRole {
  CLIENT
  ADMIN
  STAFF
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

// Health monitoring logs
model HealthLog {
  id        String   @id @default(cuid())
  service   String
  status    String
  message   String?
  checkedAt DateTime @default(now())
}
