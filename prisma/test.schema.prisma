generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./tmp-test.db"
}

// User model for authentication and role management
model User {
  id             String    @id @default(cuid())
  tenantId       String
  email          String
  name           String?
  password       String?
  image          String?
  role           UserRole  @default(CLIENT)
  emailVerified  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  sessionVersion Int       @default(0)

  employeeId            String?  @unique
  department            String?
  position              String?
  skills                String[]
  expertiseLevel        ExpertiseLevel?
  hourlyRate            Decimal?
  availabilityStatus    AvailabilityStatus @default(AVAILABLE)
  maxConcurrentProjects Int?     @default(3)
  hireDate              DateTime?
  managerId             String?

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  accounts Account[]
  sessions Session[]
  posts    Post[]
  bookings Booking[]
  tasks    Task[]
  teamMembers TeamMember[] @relation("UserTeamMember")
  taskComments TaskComment[]
  taskTemplates TaskTemplate[]
  // Back-relations for ServiceRequest
  clientServiceRequests      ServiceRequest[] @relation("ServiceRequestClient")
  assignedByServiceRequests  ServiceRequest[] @relation("ServiceRequestAssignedBy")
  serviceRequestComments     ServiceRequestComment[]
  manager     User?            @relation("ManagerEmployee", fields: [managerId], references: [id], onDelete: SetNull)
  employees   User[]           @relation("ManagerEmployee")
  grantedPermissions UserPermission[] @relation("GrantedBy")
  userPermissions    UserPermission[] @relation("UserPermissions")
  attachments Attachment[]
  bookingPreferences BookingPreferences?
  workOrdersAsClient WorkOrder[] @relation("WorkOrderClient")
  assignedWorkOrders WorkOrder[] @relation("WorkOrderAssignee")
  invoices Invoice[]
  expenses Expense[]
  tenantMemberships TenantMembership[]

  @@unique([tenantId, email])
  @@index([tenantId, role])
  @@index([tenantId, createdAt])
  @@map("users")
}

// NextAuth Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// NextAuth VerificationToken model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum TenantStatus {
  ACTIVE
  SUSPENDED
  DECOMMISSIONED
}

model Tenant {
  id                   String                @id @default(cuid())
  slug                 String                @unique
  name                 String
  status               TenantStatus          @default(ACTIVE)
  primaryDomain        String?               @unique
  description          String?
  featureFlags         Json?
  metadata             Json?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  users                User[]
  tasks                Task[]
  complianceRecords    ComplianceRecord[]
  healthLogs           HealthLog[]
  organizationSettings OrganizationSettings?
  integrationSettings  IntegrationSettings?
  communicationSettings CommunicationSettings?
  securitySettings     SecuritySettings?
  tenantMemberships    TenantMembership[]

  @@index([status])
}

model TenantMembership {
  id        String   @id @default(cuid())
  userId    String
  tenantId  String
  role      UserRole @default(CLIENT)
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId])
  @@index([tenantId])
  @@index([userId])
  @@map("tenant_memberships")
}

// Blog posts model
model Post {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  content     String      @db.Text
  excerpt     String?     @db.Text
  published   Boolean     @default(false)
  featured    Boolean     @default(false)
  coverImage  String?
  seoTitle    String?
  seoDescription String?
  tags        String[]
  readTime    Int?
  views       Int         @default(0)
  authorId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  publishedAt DateTime?

  // Advanced content management fields
  status         PostStatus    @default(DRAFT)
  archived       Boolean       @default(false)
  scheduledAt    DateTime?
  priority       PostPriority  @default(MEDIUM)
  category       String?
  reviewRequired Boolean       @default(false)
  isCompliant    Boolean       @default(true)
  approvedBy     String?
  version        Int           @default(1)
  shares         Int           @default(0)
  comments       Int           @default(0)

  // Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([publishedAt])
  @@index([featured])
  @@map("posts")
}

// Newsletter subscribers
model Newsletter {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  subscribed  Boolean  @default(true)
  source      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("newsletter")
}

// Notification settings for tasks/alerts
model NotificationSettings {
  id           String   @id @default(cuid())
  emailEnabled Boolean  @default(false)
  emailFrom    String?
  webhookUrl   String?
  templates    Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("notification_settings")
}

// Services offered by the accounting firm
model Service {
  id          String    @id @default(cuid())
  name        String
  slug        String
  description String    @db.Text
  shortDesc   String?
  features    String[]
  price       Decimal?
  duration    Int?
  category    String?
  active      Boolean   @default(true)
  featured    Boolean   @default(false)
  image       String?
  serviceSettings Json?
  views        Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  basePrice     Decimal?
  estimatedDurationHours Int?
  requiredSkills String[]
  status        ServiceStatus @default(ACTIVE)
  tenantId     String?

  // Booking enhancements
  bookingEnabled      Boolean  @default(true)
  advanceBookingDays  Int      @default(30)
  minAdvanceHours     Int      @default(24)
  maxDailyBookings    Int?
  bufferTime          Int      @default(0)
  businessHours       Json?
  blackoutDates       DateTime[]

  // Relations
  bookings Booking[]
  serviceRequests ServiceRequest[]
  availabilitySlots AvailabilitySlot[]
  serviceViews ServiceView[]
  workOrders WorkOrder[]

  @@index([tenantId])
  @@unique([tenantId, slug])
  @@index([active, bookingEnabled])
  @@index([status])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([active, featured])
  @@map("services")
}

// ... rest of schema unchanged (copied from prisma/schema.prisma)
